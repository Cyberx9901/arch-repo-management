#!/usr/bin/python

import asyncio
import json
from argparse import ArgumentParser
from fcntl import LOCK_EX, flock
from pathlib import Path
from sys import argv, exit

from lib.dbwrite import generate_dbs


async def main(repo, pkgbases) -> int:
    metadir = (Path(argv[0]).parent / "meta").resolve(strict=True)
    # XXX stating and meta need not have the same parent directory (/srv, /srv/ftp)
    stagingdir = (Path(argv[0]).parent / "staging").resolve(strict=True)
    pooldir = (Path(argv[0]).parent / "pool").resolve(strict=True)

    # FIXME: Put this into metadir/.git/
    lockfile = (metadir / "dbscripts.lock").open(mode="w")
    flock(lockfile, LOCK_EX)

    # check that user has access to this repo
    if not (metadir / repo).is_dir():
        raise RuntimeError(f"repo '{repo}' is not allowed")

    # load existing repo metadata
    def json_load(path):
        with path.open() as f:
            return json.load(f)

    def repo_load(repo):
        repodir = metadir / repo
        return {p.stem: json_load(repodir / p) for p in repodir.glob("*.json")}

    meta = {repo: repo_load(repo)}
    removals = ()

    # remove packages from meta and corresponding json files
    for pkgbase in pkgbases:
        if pkgbase not in meta[repo]:
            raise RuntimeError(f"pkgbase '{pkgbase}' is not present in '{repo}' repo")
        # old package files
        for package in meta[repo][pkgbase]["packages"]:
            removals.append(package["filename"])
        # remove database entry
        del meta[repo][pkgbase]
        (metadir / repo / f"{pkgbase}.json").unlink()

    # rebuild DB file using `meta` object
    generate_dbs(meta)
    # XXX git commit

    # remove old symlinks
    for p in removals:
        (stagingdir / p).unlink()
        (stagingdir / p + ".sig").unlink()
        (pooldir / p).unlink()
        (pooldir / p + ".sig").unlink()

    return 0


if __name__ == "__main__":
    parser = ArgumentParser(description="Remove pkgbase(s) from a repo")
    parser.add_argument("repo", help="repository name")
    parser.add_argument("pkgbase", help="pkgbase(s) to remove", nargs="+")
    args = parser.parse_args()
    exit(asyncio.run(main(args.repo, args.pkgbase)))
