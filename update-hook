#!/usr/bin/python
# Based on 'update.sample' shell script

from argparse import ArgumentParser
from os import environ
from pathlib import Path
from subprocess import check_output
from sys import argv, exit, stderr


def die(*lines):
    print(*lines, sep="\n", file=stderr)
    exit(1)


try:
    gitdir = Path(environ["GIT_DIR"])
except KeyError:
    die(
        "Don't run this script from the command line.",
        f"If you want, you could supply GIT_DIR then run: {argv[0]} <ref> <oldrev> <newrev>",
    )

parser = ArgumentParser(description="Packages git update hook.")
parser.add_argument("ref", metavar="REF", help="Ref getting updated")
parser.add_argument("oldrev", metavar="OLDREV", help="Old revision ID")
parser.add_argument("newrev", metavar="NEWREV", help="New revision ID")
args = parser.parse_args()

newrev_type = (
    "delete"
    if args.newrev == "0000000000000000000000000000000000000000"
    else check_output(["git", "cat-file", "-t", args.newrev]).decode().strip()
)

if args.ref.startswith("refs/tags/"):
    shortref = args.ref[10:]
    if newrev_type == "commit":
        die(
            f"*** Tag '{shortref}' has not been annotated.",
            "*** Use 'git tag [ -a | -s ]' for tags you want to propagate.",
        )
    elif newrev_type in ("tag", "delete"):
        locked_tags = (gitdir / "locked-tags").read_text().splitlines()
        if args.oldrev != args.newrev and shortref in locked_tags:
            die(
                f"*** Tag '{shortref}' has been locked.",
                "*** Modifying a locked tag is not allowed in this repository.",
            )
    else:
        die(f"*** Cannot push '{newrev_type}' to tag '{shortref}'.", "Must be a tag.")
elif args.ref.startswith("refs/heads/"):
    shortref = args.ref[11:]
    if newrev_type not in ("commit", "delete"):
        die(
            f"*** Cannot push '{newrev_type}' to branch '{shortref}'."
            "Must be a commit."
        )
else:
    die(f"*** Update hook: Bad ref '{args.ref}'")
